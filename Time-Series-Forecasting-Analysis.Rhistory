version()
'demo()'
'demo()'
demo()
help.start
q()
load("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/day.csv")
install.packages(c("tidyverse", "lubridate", "forecast", "timetk", "ggplot2"))
library(tidyverse)
library(lubridate)
library(forecast)
library(timetk)
library(ggplot2)
day <- read.csv("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/day.csv")
View(day)
hour <- read.csv("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/hour.csv")
View(hour)
glimpse(day)
glimpse(hour)
day$dteday <- as.Date(daily_data$dteday)
day$dteday <- as.Date(day$dteday)
hour$dteday <- as.Date(hour$dteday)
day <- day %>%
mutate(day_of_week = wday(dteday, label = TRUE))
hour <- hour %>%
mutate(hour = hour(dteday),
day_of_week = wday(dteday, label = TRUE))
ggplot(day, aes(x = dteday, y = cnt)) +
geom_line(color = "blue") +
labs(title = "Daily Bike Rentals Over Time", x = "Date", y = "Total Rentals")
hour %>%
filter(dteday == as.Date("2011-01-01")) %>%
ggplot(aes(x = hour, y = cnt)) +
geom_line(color = "red") +
labs(title = "Hourly Bike Rentals on 2011-01-01", x = "Hour", y = "Total Rentals")
day_ts <- ts(day$cnt, frequency = 365)
decomposed_daily <- decompose(day_ts)
autoplot(decomposed_daily)
adf.test(day_ts)
install.packages("tseries")
library(tseries)
adf.test(day_ts)
day_ts <- ts(day$cnt, frequency = 365)
> decomposed_daily <- decompose(day_ts)
day_ts <- ts(day_data$cnt, frequency = 365)
day_data <- read.csv("path/to/your/daily_data.csv")
daily_data <- read.csv("path/to/your/daily_data.csv")
day_data <- read.csv("path/to/your/day.csv")
day_data <- read.csv("day.csv")
glimpse(day_data)
install.packages(c("tidyverse", "lubridate", "forecast", "timetk", "ggplot2"))
library(tidyverse)
library(lubridate)
library(forecast)
library(timetk)
library(ggplot2)
day <- read.csv("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/day.csv")
View(day)
hour <- read.csv("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/hour.csv")
View(hour)
glimpse(day)
glimpse(hour)
day_cleaned <- na.omit(day)
hour_cleaned <- na.omit(hour)
day_cleaned <- day_cleaned %>%
mutate(day_of_week = wday(dteday, label = TRUE))
hour_cleaned <- hour_cleaned %>%
mutate(hour = hour(dteday),
day_of_week = wday(dteday, label = TRUE))
ggplot(day_cleaned, aes(x = dteday, y = cnt)) +
geom_line(color = "blue") +
labs(title = "Daily Bike Rentals Over Time", x = "Date", y = "Total Rentals")
ggplot(day, aes(x = dteday, y = cnt)) +
+     geom_line(color = "blue") +
+     labs(title = "Daily Bike Rentals Over Time", x = "Date", y = "Total Rentals")
day_cleaned$dteday <- as.Date(day_cleaned$dteday)
any(duplicated(day_cleaned$dteday))
ggplot(day_cleaned, aes(x = dteday, y = cnt, group = 1)) +
geom_line(color = "blue") +
labs(title = "Daily Bike Rentals Over Time", x = "Date", y = "Total Rentals")
head(day_cleaned)
hour_cleaned %>%
filter(dteday == as.Date("2011-01-01")) %>%
ggplot(aes(x = hour, y = cnt)) +
geom_line(color = "red") +
labs(title = "Hourly Bike Rentals on 2011-01-01", x = "Hour", y = "Total Rentals")
head(hour_cleaned)
install.packages("tseries")
library(tseries)
daily_ts <- ts(day_cleaned$cnt, frequency = 365)
decomposed_daily <- decompose(daily_ts)
autoplot(decomposed_daily)
install.packages("ggfortify")
library(ggfortify)
daily_ts <- ts(day_cleaned$cnt, frequency = 365)
decomposed_daily <- decompose(daily_ts)
autoplot(decomposed_daily)
adf.test(daily_ts)
install.packages("tseries")
library(tseries)
adf.test(daily_ts)
arima_model <- auto.arima(daily_ts)
install.packages("forecast")
library(forecast)
arima_model <- auto.arima(daily_ts)
forecasted_values <- forecast(arima_model, h = 30)
autoplot(forecasted_values) +
labs(title = "30-Day Bike Rental Demand Forecast", x = "Date", y = "Forecasted Rentals")
checkresiduals(arima_model)
ggsave("bike_rental_forecast.png")
write.csv(forecasted_values, "forecasted_bike_rentals.csv")
diff_daily_ts <- diff(daily_ts)
adf.test(diff_daily_ts)
sarima_model <- auto.arima(daily_ts, seasonal = TRUE)
checkresiduals(sarima_model)
exog <- cbind(day_cleaned$temp, day_cleaned$weathersit)
arima_exog_model <- auto.arima(daily_ts, xreg = exog)
checkresiduals(arima_exog_model)
autoplot(forecasted_values) +
labs(title = "30-Day Bike Rental Demand Forecast", x = "Date", y = "Forecasted Rentals") +
theme_minimal()
sarimax_model <- auto.arima(daily_ts, seasonal = TRUE, xreg = exog)
checkresiduals(sarimax_model)
install.packages("prophet")
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>% select(dteday, cnt)
# Preparing data for Prophet
day_prophet <- day_cleaned %>% select(dteday, cnt)
install.packages("dplyr")
library(dplyr)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>% select(dteday, cnt)
colnames(day_prophet) <- c("ds", "y")
# Fit the model
m <- prophet(day_prophet)
# Adding regressors
m <- add_regressor(m, 'temp')
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Predict
future <- make_future_dataframe(m, periods = 30)
future <- cbind(future, temp = day_cleaned$temp, weathersit = day_cleaned$weathersit)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Separate historical data
historical_future <- future[1:nrow(day_prophet), ]
# Add the actual regressor values to the historical data
historical_future$temp <- day_cleaned$temp
historical_future$weathersit <- day_cleaned$weathersit
# Estimate or set average values for the future period
future_values <- future[(nrow(day_prophet) + 1):nrow(future), ]
future_values$temp <- mean(day_cleaned$temp)
future_values$weathersit <- mean(day_cleaned$weathersit)
# Combine historical and estimated future values
future <- rbind(historical_future, future_values)
# Predict
forecast <- predict(m, future)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Extract the relevant historical data
historical_future <- future[1:nrow(day_prophet), ]
# Add the actual regressor values to the historical data
historical_future <- historical_future %>%
mutate(temp = day_cleaned$temp,
weathersit = day_cleaned$weathersit)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Convert ds (date) column to Date format if not already
day_prophet$ds <- as.Date(day_prophet$ds)
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe and convert ds column to Date format
future <- make_future_dataframe(m, periods = 30)
future$ds <- as.Date(future$ds)
# Extract the relevant historical data
historical_future <- future[1:nrow(day_prophet), ]
# Add the actual regressor values to the historical data
historical_future <- historical_future %>%
mutate(temp = day_cleaned$temp,
weathersit = day_cleaned$weathersit)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Separate historical part from future dataframe
historical_future <- future[1:nrow(day_prophet), ]
# Convert historical_future to a data frame if it's not already
historical_future <- as.data.frame(historical_future)
# Add the actual regressor values to the historical data
historical_future$temp <- day_cleaned$temp
historical_future$weathersit <- day_cleaned$weathersit
# Create a future_values dataframe for the forecast period
future_values <- future[(nrow(day_prophet) + 1):nrow(future), ]
# Ensure future_values is a data frame
future_values <- as.data.frame(future_values)
# Set estimated values for the future period
future_values$temp <- mean(day_cleaned$temp)
future_values$weathersit <- mean(day_cleaned$weathersit)
# Combine historical and future dataframes
future <- bind_rows(historical_future, future_values)
# Predict
forecast <- predict(m, future)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Rename columns to the format expected by Prophet
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Check the structure to ensure ds column exists
str(future)
# Separate historical part from future dataframe
historical_future <- future[1:nrow(day_prophet), ]
# Convert historical_future to a data frame if it's not already
historical_future <- as.data.frame(historical_future)
# Ensure the `ds` column exists and is correctly named
colnames(historical_future) <- "ds"
# Add the actual regressor values to the historical data
historical_future$temp <- day_cleaned$temp
historical_future$weathersit <- day_cleaned$weathersit
# Create a future_values dataframe for the forecast period
future_values <- future[(nrow(day_prophet) + 1):nrow(future), ]
# Ensure future_values is a data frame
future_values <- as.data.frame(future_values)
# Set estimated values for the future period
future_values$temp <- mean(day_cleaned$temp)
future_values$weathersit <- mean(day_cleaned$weathersit)
# Combine historical and future dataframes
future <- bind_rows(historical_future, future_values)
# Ensure 'ds' column is correctly ordered and present
future <- future %>% arrange(ds)
# Predict
forecast <- predict(m, future)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Convert dteday to Date format and rename columns
day_prophet$dteday <- as.Date(day_prophet$dteday)
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Convert future$ds to Date format (just in case)
future$ds <- as.Date(future$ds)
# Separate historical part from future dataframe
historical_future <- future[1:nrow(day_prophet), ]
# Convert historical_future to a data frame if it's not already
historical_future <- as.data.frame(historical_future)
# Ensure the `ds` column is in Date format
historical_future$ds <- as.Date(historical_future$ds)
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Convert dteday to Date format and rename columns
day_prophet$ds <- as.Date(day_prophet$dteday)  # Convert to Date
day_prophet <- day_prophet %>% select(ds, cnt, temp, weathersit)
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Convert future$ds to Date format (if needed)
future$ds <- as.Date(future$ds)
# Separate historical part from future dataframe
historical_future <- future[1:nrow(day_prophet), ]
# Convert historical_future to a data frame
historical_future <- as.data.frame(historical_future)
# Add the actual regressor values to the historical data
historical_future$temp <- day_prophet$temp
historical_future$weathersit <- day_prophet$weathersit
# Create a future_values dataframe for the forecast period
future_values <- future[(nrow(day_prophet) + 1):nrow(future), ]
# Check that future_values is not empty
if (nrow(future_values) > 0) {
# Ensure future_values is a data frame and convert `ds` to Date
future_values <- as.data.frame(future_values)
future_values$ds <- as.Date(future_values$ds)
# Set estimated values for the future period
future_values$temp <- mean(day_prophet$temp, na.rm = TRUE)
future_values$weathersit <- mean(day_prophet$weathersit, na.rm = TRUE)
# Combine historical and future dataframes
future <- bind_rows(historical_future, future_values)
} else {
# If future_values is empty, just use historical_future
future <- historical_future
}
# Load necessary packages
library(dplyr)
library(prophet)
# Preparing data for Prophet
day_prophet <- day_cleaned %>%
select(dteday, cnt, temp, weathersit)
# Convert dteday to Date format and rename columns
day_prophet$ds <- as.Date(day_prophet$dteday)  # Convert to Date
day_prophet <- day_prophet %>% select(ds, cnt, temp, weathersit)
colnames(day_prophet) <- c("ds", "y", "temp", "weathersit")
# Specify the model and add regressors
m <- prophet() %>%
add_regressor('temp') %>%
add_regressor('weathersit')
# Fit the model
m <- fit.prophet(m, day_prophet)
# Create future dataframe
future <- make_future_dataframe(m, periods = 30)
# Convert future$ds to Date format (if needed)
future$ds <- as.Date(future$ds)
# Separate historical part from future dataframe
historical_future <- future[1:nrow(day_prophet), ]
# Convert historical_future to a data frame
historical_future <- as.data.frame(historical_future)
# Add the actual regressor values to the historical data
historical_future$temp <- day_prophet$temp
historical_future$weathersit <- day_prophet$weathersit
# Create a future_values dataframe for the forecast period
future_values <- future[(nrow(day_prophet) + 1):nrow(future), ]
# Debugging: Check if future_values is created correctly
print("Future Values:")
print(future_values)
print(paste("Number of rows in future_values:", nrow(future_values)))
# If future_values is not empty, proceed
if (nrow(future_values) > 0) {
# Ensure future_values is a data frame and convert `ds` to Date
future_values <- as.data.frame(future_values)
future_values$ds <- as.Date(future_values$ds)
# Set estimated values for the future period
future_values$temp <- mean(day_prophet$temp, na.rm = TRUE)
future_values$weathersit <- mean(day_prophet$weathersit, na.rm = TRUE)
# Combine historical and future dataframes
future <- bind_rows(historical_future, future_values)
} else {
# If future_values is empty, just use historical_future
future <- historical_future
}
install.packages("xgboost")
library(xgboost)
# Preparing data (e.g., create lag features)
day_lagged <- day_cleaned %>%
mutate(lag_1 = lag(cnt, 1),
lag_2 = lag(cnt, 2),
lag_7 = lag(cnt, 7)) %>%
drop_na()
sarimax_model_refined <- arima(daily_ts, order = c(1, 0, 2),
seasonal = list(order = c(1, 1, 1), period = 365),
xreg = exog)
exog_extended <- cbind(day_cleaned$temp, day_cleaned$weathersit, day_cleaned$weekday)
sarimax_model_extended <- auto.arima(daily_ts, seasonal = TRUE, xreg = exog_extended)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 2), seasonal = c(0, 1, 1), xreg = exog)
library(forecast)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 2), seasonal = c(0, 1, 1), xreg = exog)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 2), seasonal = c(0, 1, 1), xreg = exog)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 2), seasonal = list(order = c(0, 1, 1), period = 365), xreg = exog)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 1), seasonal = c(0, 1, 1), xreg = exog)
sarimax_model_tuned <- Arima(daily_ts, order = c(1, 0, 1), seasonal = c(0, 1, 0), xreg = exog)
# Forecast the next 30 days
forecasted_values <- forecast(sarimax_model_tuned, xreg = exog_future, h = 30)
# Forecast the next 30 days
forecasted_values <- forecast(sarimax_model_tuned, xreg = exog, h = 30)
# Plot the forecast
autoplot(forecasted_values) +
labs(title = "30-Day Bike Rental Demand Forecast", x = "Date", y = "Forecasted Rentals") +
theme_minimal()
install.packages("ggplot2")  # Install if not already installed
library(ggplot2)              # Load the package
# Forecast the next 30 days
forecasted_values <- forecast(sarimax_model_tuned, xreg = exog, h = 30)
install.packages("forecast")  # Install the forecast package if it's not installed
library(forecast)              # Load the forecast package
# Forecast the next 30 days
forecasted_values <- forecast(sarimax_model_tuned, xreg = exog, h = 30)
# Plot the forecast
autoplot(forecasted_values) +
labs(title = "30-Day Bike Rental Demand Forecast", x = "Date", y = "Forecasted Rentals") +
theme_minimal()
forecasted_values <- forecast(sarimax_model, h = 30, xreg = exog)
library(ggplot2)
library(forecast)
autoplot(forecasted_values) +
labs(title = "30-Day Bike Rental Demand Forecast",
x = "Date",
y = "Forecasted Rentals") +
theme_minimal()
savehistory("C:/Users/ANDRES/OneDrive/Desktop/Bike sharing/Time-Series-Forecasting-Analysis.Rhistory")
